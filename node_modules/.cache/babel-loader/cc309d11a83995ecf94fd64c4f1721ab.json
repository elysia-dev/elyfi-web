{"ast":null,"code":"var _jsxFileName = \"/Users/hyunobae/dev/jamaica/src/providers/LanguageProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport LanguageContext, { initialLanguageContext } from '../contexts/LanguageContext';\nimport LanguageType from '../enums/LanguageType';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenProvider = props => {\n  _s();\n\n  const [state, setState] = useState(initialLanguageContext);\n  const {\n    i18n\n  } = useTranslation();\n\n  const setLanguage = language => {\n    i18n.changeLanguage(language);\n    setState({ ...state,\n      language\n    });\n  };\n\n  const ChangeLanguageArray = language => {\n    setState({ ...state,\n      languageArray: [LanguageType.EN, LanguageType.KO, LanguageType.ZHHANS].filter(num => num !== language)\n    });\n  }; // useEffect(() => {\n  //   let lang = navigator.language;\n  //   lang = lang.toLowerCase().substring(0, 2);\n  //   console.log(\"돌아가나?\")\n  //   console.log(lang)\n  //   if (lang.includes('ko')) {\n  //     setLanguage(LanguageType.KO)\n  //   } else if (lang.includes('zh')) {\n  //     setLanguage(LanguageType.ZHHANS)\n  //   } else { \n  //     setLanguage(LanguageType.EN)\n  //   }\n  // }, [])\n\n\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: { ...state,\n      setLanguage,\n      ChangeLanguageArray\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenProvider, \"S5EsDolgFoD5v29ih/rsKR2NMhk=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TokenProvider;\nexport default TokenProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"sources":["/Users/hyunobae/dev/jamaica/src/providers/LanguageProvider.tsx"],"names":["useState","useTranslation","LanguageContext","initialLanguageContext","LanguageType","TokenProvider","props","state","setState","i18n","setLanguage","language","changeLanguage","ChangeLanguageArray","languageArray","EN","KO","ZHHANS","filter","num","children"],"mappings":";;;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,eAAP,IAA0BC,sBAA1B,QAA0E,6BAA1E;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;;AAEA,MAAMC,aAAuB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAmBG,sBAAnB,CAAlC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWR,cAAc,EAA/B;;AAEA,QAAMS,WAAW,GAAIC,QAAD,IAA4B;AAC9CF,IAAAA,IAAI,CAACG,cAAL,CAAoBD,QAApB;AACAH,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEPI,MAAAA;AAFO,KAAD,CAAR;AAID,GAND;;AAQA,QAAME,mBAAmB,GAAIF,QAAD,IAA4B;AACtDH,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEPO,MAAAA,aAAa,EACX,CAACV,YAAY,CAACW,EAAd,EAAkBX,YAAY,CAACY,EAA/B,EAAmCZ,YAAY,CAACa,MAAhD,EAAwDC,MAAxD,CAA+DC,GAAG,IAAIA,GAAG,KAAKR,QAA9E;AAHK,KAAD,CAAR;AAKD,GAND,CAZyC,CAqBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE,EAC/B,GAAGJ,KAD4B;AAE/BG,MAAAA,WAF+B;AAG/BG,MAAAA;AAH+B,KAAjC;AAAA,cAKGP,KAAK,CAACc;AALT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA5CD;;GAAMf,a;UAEaJ,c;;;KAFbI,a;AA8CN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport LanguageContext, { initialLanguageContext, ILanguageContext } from '../contexts/LanguageContext';\nimport LanguageType from '../enums/LanguageType';\n\nconst TokenProvider: React.FC = (props) => {\n  const [state, setState] = useState<ILanguageContext>(initialLanguageContext);\n  const { i18n } = useTranslation();\n\n  const setLanguage = (language: LanguageType) => {\n    i18n.changeLanguage(language)\n    setState({\n      ...state,\n      language\n    })\n  }\n\n  const ChangeLanguageArray = (language: LanguageType) => {\n    setState({ \n      ...state, \n      languageArray: \n        [LanguageType.EN, LanguageType.KO, LanguageType.ZHHANS].filter(num => num !== language) \n      })\n  }\n\n\n  // useEffect(() => {\n  //   let lang = navigator.language;\n  //   lang = lang.toLowerCase().substring(0, 2);\n  //   console.log(\"돌아가나?\")\n  //   console.log(lang)\n  //   if (lang.includes('ko')) {\n  //     setLanguage(LanguageType.KO)\n  //   } else if (lang.includes('zh')) {\n  //     setLanguage(LanguageType.ZHHANS)\n  //   } else { \n  //     setLanguage(LanguageType.EN)\n  //   }\n  // }, [])\n\n  return (\n    <LanguageContext.Provider value={{\n      ...state,\n      setLanguage,\n      ChangeLanguageArray\n    }}>\n      {props.children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport default TokenProvider;"]},"metadata":{},"sourceType":"module"}