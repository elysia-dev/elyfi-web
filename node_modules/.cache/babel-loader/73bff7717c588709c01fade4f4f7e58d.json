{"ast":null,"code":"var _jsxFileName = \"/Users/hyunobae/dev/jamaica/src/providers/LanguageProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport LanguageContext, { initialLanguageContext } from '../contexts/LanguageContext';\nimport LanguageType from '../enums/LanguageType';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenProvider = props => {\n  _s();\n\n  const [state, setState] = useState(initialLanguageContext);\n  const {\n    i18n\n  } = useTranslation();\n\n  const setLanguage = language => {\n    i18n.changeLanguage(language);\n    setState({ ...state,\n      language\n    });\n  };\n\n  useEffect(() => {\n    let lang = navigator.language;\n    lang = lang.toLowerCase().substring(0, 2);\n    console.log(\"돌아가나?\");\n    console.log(lang);\n\n    if (lang.includes('ko')) {\n      setLanguage(LanguageType.KO);\n    } else if (lang.includes('zh')) {\n      setLanguage(LanguageType.ZHHANS);\n    } else {\n      setLanguage(LanguageType.EN);\n    }\n\n    console.log(\"lang\");\n    console.log(\"i18n\" + i18n.language);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: { ...state,\n      setLanguage\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenProvider, \"WvYIi09T4wygVy8VPEMIdcAMmSQ=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TokenProvider;\nexport default TokenProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"sources":["/Users/hyunobae/dev/jamaica/src/providers/LanguageProvider.tsx"],"names":["useEffect","useState","useTranslation","LanguageContext","initialLanguageContext","LanguageType","TokenProvider","props","state","setState","i18n","setLanguage","language","changeLanguage","lang","navigator","toLowerCase","substring","console","log","includes","KO","ZHHANS","EN","children"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,eAAP,IAA0BC,sBAA1B,QAA0E,6BAA1E;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;;AAEA,MAAMC,aAAuB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAmBG,sBAAnB,CAAlC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWR,cAAc,EAA/B;;AAEA,QAAMS,WAAW,GAAIC,QAAD,IAA4B;AAC9CF,IAAAA,IAAI,CAACG,cAAL,CAAoBD,QAApB;AACAH,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEPI,MAAAA;AAFO,KAAD,CAAR;AAID,GAND;;AASAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,IAAI,GAAGC,SAAS,CAACH,QAArB;AACAE,IAAAA,IAAI,GAAGA,IAAI,CAACE,WAAL,GAAmBC,SAAnB,CAA6B,CAA7B,EAAgC,CAAhC,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;;AACA,QAAIA,IAAI,CAACM,QAAL,CAAc,IAAd,CAAJ,EAAyB;AACvBT,MAAAA,WAAW,CAACN,YAAY,CAACgB,EAAd,CAAX;AACD,KAFD,MAEO,IAAIP,IAAI,CAACM,QAAL,CAAc,IAAd,CAAJ,EAAyB;AAC9BT,MAAAA,WAAW,CAACN,YAAY,CAACiB,MAAd,CAAX;AACD,KAFM,MAEA;AACLX,MAAAA,WAAW,CAACN,YAAY,CAACkB,EAAd,CAAX;AACD;;AAEDL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAST,IAAI,CAACE,QAA1B;AACD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE,EAC/B,GAAGJ,KAD4B;AAE/BG,MAAAA;AAF+B,KAAjC;AAAA,cAIGJ,KAAK,CAACiB;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAtCD;;GAAMlB,a;UAEaJ,c;;;KAFbI,a;AAwCN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport LanguageContext, { initialLanguageContext, ILanguageContext } from '../contexts/LanguageContext';\nimport LanguageType from '../enums/LanguageType';\n\nconst TokenProvider: React.FC = (props) => {\n  const [state, setState] = useState<ILanguageContext>(initialLanguageContext);\n  const { i18n } = useTranslation();\n\n  const setLanguage = (language: LanguageType) => {\n    i18n.changeLanguage(language)\n    setState({\n      ...state,\n      language\n    })\n  }\n\n\n  useEffect(() => {\n    let lang = navigator.language;\n    lang = lang.toLowerCase().substring(0, 2);\n    console.log(\"돌아가나?\")\n    console.log(lang)\n    if (lang.includes('ko')) {\n      setLanguage(LanguageType.KO)\n    } else if (lang.includes('zh')) {\n      setLanguage(LanguageType.ZHHANS)\n    } else { \n      setLanguage(LanguageType.EN)\n    }\n\n    console.log(\"lang\" );\n    console.log(\"i18n\" + i18n.language)\n  }, [])\n\n  return (\n    <LanguageContext.Provider value={{\n      ...state,\n      setLanguage\n    }}>\n      {props.children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport default TokenProvider;"]},"metadata":{},"sourceType":"module"}