{"ast":null,"code":"import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\n\nexport default function getStateFromPath(path, options) {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n  let initialRoutes = [];\n\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  const screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n  // Make sure there is a trailing slash\n\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map((segment, i, self) => {\n      const name = decodeURIComponent(segment);\n\n      if (i === self.length - 1) {\n        return {\n          name,\n          params: parseQueryParams(path)\n        };\n      }\n\n      return {\n        name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  } // Create a normalized configs array which will be easier to use\n\n\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    } // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    const aWildcardIndex = aParts.indexOf('*');\n    const bWildcardIndex = bParts.indexOf('*'); // If only one of the patterns has a wildcard, move it down in the list\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n\n    if (aWildcardIndex === bWildcardIndex) {\n      // If `b` has more `/`, it's more exhaustive\n      // So we move it up in the list\n      return bParts.length - aParts.length;\n    } // If the wildcard appears later in the pattern (has higher index), it's more specific\n    // So we move it up in the list\n\n\n    return bWildcardIndex - aWildcardIndex;\n  }); // Check for duplicate patterns in the config\n\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames; // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every( // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map((name, i, self) => {\n        if (i === self.length - 1) {\n          return {\n            name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  let result;\n  let current;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configs.map(c => ({ ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    })));\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let {\n        routes,\n        remainingPath\n      } = matchAgainstConfigs(remaining, configs);\n      remaining = remainingPath; // If we hadn't matched any segments earlier, use the path as route name\n\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n        routes = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        var _current2; // The state should be nested inside the deepest route we parsed before\n\n\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params,\n      ...params\n    };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining; // Go through all configs, and see if the next path segment matches our regex\n\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex); // If our regex matches, we need to extract params from the path\n\n    if (match) {\n      var _config$pattern;\n\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n\n  return {\n    routes,\n    remainingPath\n  };\n};\n\nconst createNormalizedConfigs = (legacy, screen, routeConfig, routeNames = [], initials, parentScreens, parentPattern) => {\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern; // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n\n      Object.keys(config.screens).forEach(nestedConfig => {\n        var _pattern;\n\n        const result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, [...parentScreens], (_pattern = pattern) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nconst createConfigItem = (legacy, screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(it => {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\n\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n}; // Try to find an initial route connected with the one passed\n\n\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n\n  return undefined;\n}; // returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\n\n\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, { ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{ ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (routes, initialRoutes) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = state => {\n  var _current4;\n\n  let current = state;\n\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3; // The query params apply to the deepest route\n\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["checkLegacyPathConfig","initialRoutes","compatOptions","initialRouteName","parentScreens","screens","remaining","routes","name","decodeURIComponent","i","self","params","parseQueryParams","createNestedStateObject","configs","Object","key","createNormalizedConfigs","a","b","aParts","bParts","aWildcardIndex","bWildcardIndex","acc","config","intersects","match","c","legacy","remainingPath","matchAgainstConfigs","regex","undefined","current","result","segments","state","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeNames","routeConfig","pattern","parentPattern","createConfigItem","initials","nestedConfig","it","escape","parse","routeName","findInitialRoute","sameParents","createStateObject","index","initialRoute","nestedState","nestedStateIndex","query","path","queryString","parseConfig"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}