{"ast":null,"code":"var _jsxFileName = \"/Users/hyunobae/dev/jamaica/src/providers/TokenProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport TokenContext, { initialTokenContext } from '../contexts/TokenContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenProvider = props => {\n  _s();\n\n  const [state, setState] = useState(initialTokenContext); // const stateSetting = () => {\n  //   setState({\n  //     ...state,\n  //     tokenlist: [\n  //       {\n  //         tokenName: \"ELA001\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.COMMERCIAL,\n  //         marketSize: 564651234,\n  //         totalBorrowed: 2323123321323423,\n  //         depositApy: 29.2,\n  //         borrowApr: 1.23\n  //       },\n  //       {\n  //         tokenName: \"ELA002\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.RESIDENTIAL,\n  //         marketSize: 23123123123,\n  //         totalBorrowed: 0,\n  //         depositApy: 4.422,\n  //         borrowApr: 20\n  //       },\n  //       {\n  //         tokenName: \"ELA003\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.COMMERCIAL,\n  //         marketSize: 11123132213133,\n  //         totalBorrowed: 23214123232,\n  //         depositApy: 3.3,\n  //         borrowApr: 44\n  //       },\n  //       {\n  //         tokenName: \"EL\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token000,\n  //         marketSize: 312312233,\n  //         totalBorrowed: 33121233,\n  //         depositApy: 2.93,\n  //         borrowApr: 192\n  //       },\n  //       {\n  //         tokenName: \"ETH\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token001,\n  //         marketSize: 0,\n  //       },\n  //       {\n  //         tokenName: \"BNB\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token002,\n  //         marketSize: 11323123213,\n  //         totalBorrowed: 2212312312312,\n  //         depositApy: 0.33,\n  //         borrowApr: 0\n  //       },\n  //     ]\n  //   })\n  // }\n\n  const SortToken = async (key, ascending) => {\n    return function (a, b) {\n      if (a[key] === b[key]) {\n        return 0;\n      } else if (a[key] === null) {\n        return 1;\n      } else if (b[key] === null) {\n        return -1;\n      } else if (ascending) {\n        return a[key] < b[key] ? -1 : 1;\n      } else {\n        return a[key] < b[key] ? 1 : -1;\n      }\n    };\n  };\n\n  const TokenReturn = async (key, ascending, tokenType) => {\n    let arrayCopy = state.tokenlist.filter(item => {\n      return item.type === tokenType;\n    });\n    arrayCopy.sort(await SortToken(key, ascending));\n    setState({ ...state,\n      tokenlist: arrayCopy\n    });\n  };\n\n  useEffect(() => {// stateSetting();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: { ...state,\n      TokenReturn\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenProvider, \"/zfA0gFXdXDykeQWr3eIFMeer14=\");\n\n_c = TokenProvider;\nexport default TokenProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"sources":["/Users/hyunobae/dev/jamaica/src/providers/TokenProvider.tsx"],"names":["useEffect","useState","TokenContext","initialTokenContext","TokenProvider","props","state","setState","SortToken","key","ascending","a","b","TokenReturn","tokenType","arrayCopy","tokenlist","filter","item","type","sort","children"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAiE,0BAAjE;;;AAQA,MAAMC,aAAuB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAgBE,mBAAhB,CAAlC,CADyC,CAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMK,SAAS,GAAG,OAAOC,GAAP,EAA0EC,SAA1E,KAAiG;AACjH,WAAO,UAAUC,CAAV,EAAwBC,CAAxB,EAAsC;AAC3C,UAAID,CAAC,CAACF,GAAD,CAAD,KAAWG,CAAC,CAACH,GAAD,CAAhB,EAAuB;AACrB,eAAO,CAAP;AACD,OAFD,MAEO,IAAIE,CAAC,CAACF,GAAD,CAAD,KAAW,IAAf,EAAqB;AAC1B,eAAO,CAAP;AACD,OAFM,MAEA,IAAIG,CAAC,CAACH,GAAD,CAAD,KAAW,IAAf,EAAqB;AAC1B,eAAO,CAAC,CAAR;AACD,OAFM,MAEA,IAAIC,SAAJ,EAAe;AACpB,eAAOC,CAAC,CAACF,GAAD,CAAD,GAAUG,CAAC,CAACH,GAAD,CAAX,GAAoB,CAAC,CAArB,GAAyB,CAAhC;AACD,OAFM,MAEA;AACL,eAAOE,CAAC,CAACF,GAAD,CAAD,GAAUG,CAAC,CAACH,GAAD,CAAX,GAAoB,CAApB,GAAwB,CAAC,CAAhC;AACD;AACF,KAZD;AAaD,GAdD;;AAeA,QAAMI,WAAW,GAAG,OAAOJ,GAAP,EAAyEC,SAAzE,EAA6FI,SAA7F,KAAuH;AACzI,QAAIC,SAAsB,GAAGT,KAAK,CAACU,SAAN,CAAgBC,MAAhB,CAAwBC,IAAD,IAAU;AAC5D,aAAOA,IAAI,CAACC,IAAL,KAAcL,SAArB;AACD,KAF4B,CAA7B;AAGAC,IAAAA,SAAS,CAACK,IAAV,CAAe,MAAMZ,SAAS,CAACC,GAAD,EAAMC,SAAN,CAA9B;AACAH,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEPU,MAAAA,SAAS,EAAED;AAFJ,KAAD,CAAR;AAID,GATD;;AAUAf,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,EAC5B,GAAGM,KADyB;AAE5BO,MAAAA;AAF4B,KAA9B;AAAA,cAIGR,KAAK,CAACgB;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnGD;;GAAMjB,a;;KAAAA,a;AAqGN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport TokenContext, { initialTokenContext, ITokenContext } from '../contexts/TokenContext'\nimport AssetTypes from '../enums/AssetType';\nimport TokenTypes from '../enums/TokenType';\nimport Token000 from '../shared/images/tokens/el.png';\nimport Token001 from '../shared/images/tokens/eth.png';\nimport Token002 from '../shared/images/tokens/bnb.png';\nimport { TokenList } from '../types/TokenList';\n\nconst TokenProvider: React.FC = (props) => {\n  const [state, setState] = useState<ITokenContext>(initialTokenContext);\n\n  // const stateSetting = () => {\n  //   setState({\n  //     ...state,\n  //     tokenlist: [\n  //       {\n  //         tokenName: \"ELA001\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.COMMERCIAL,\n  //         marketSize: 564651234,\n  //         totalBorrowed: 2323123321323423,\n  //         depositApy: 29.2,\n  //         borrowApr: 1.23\n  //       },\n  //       {\n  //         tokenName: \"ELA002\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.RESIDENTIAL,\n  //         marketSize: 23123123123,\n  //         totalBorrowed: 0,\n  //         depositApy: 4.422,\n  //         borrowApr: 20\n  //       },\n  //       {\n  //         tokenName: \"ELA003\",\n  //         type: TokenTypes.ASSETS,\n  //         image: AssetTypes.COMMERCIAL,\n  //         marketSize: 11123132213133,\n  //         totalBorrowed: 23214123232,\n  //         depositApy: 3.3,\n  //         borrowApr: 44\n  //       },\n  //       {\n  //         tokenName: \"EL\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token000,\n  //         marketSize: 312312233,\n  //         totalBorrowed: 33121233,\n  //         depositApy: 2.93,\n  //         borrowApr: 192\n  //       },\n  //       {\n  //         tokenName: \"ETH\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token001,\n  //         marketSize: 0,\n  //       },\n  //       {\n  //         tokenName: \"BNB\",\n  //         type: TokenTypes.CRYPTO,\n  //         image: Token002,\n  //         marketSize: 11323123213,\n  //         totalBorrowed: 2212312312312,\n  //         depositApy: 0.33,\n  //         borrowApr: 0\n  //       },\n  //     ]\n  //   })\n  // }\n\n  const SortToken = async (key: \"marketSize\" | \"totalBorrowed\" | \"depositApy\" | \"borrowApr\" , ascending: boolean) => {\n    return function (a: TokenList, b: TokenList) {\n      if (a[key] === b[key]) {\n        return 0;\n      } else if (a[key] === null) {\n        return 1;\n      } else if (b[key] === null) {\n        return -1;\n      } else if (ascending) {\n        return a[key]! < b[key]! ? -1 : 1;\n      } else {\n        return a[key]! < b[key]! ? 1 : -1;\n      }\n    }\n  }\n  const TokenReturn = async (key: \"marketSize\" | \"totalBorrowed\" | \"depositApy\" | \"borrowApr\", ascending: boolean, tokenType: TokenTypes) => {\n    let arrayCopy: TokenList[] = state.tokenlist.filter((item) => {\n      return item.type === tokenType\n    });\n    arrayCopy.sort(await SortToken(key, ascending))\n    setState({\n      ...state,\n      tokenlist: arrayCopy\n    })\n  }\n  useEffect(() => {\n    // stateSetting();\n  } ,[])\n\n  return (\n    <TokenContext.Provider value={{\n      ...state,\n      TokenReturn\n    }}>\n      {props.children}\n    </TokenContext.Provider>\n  );\n}\n\nexport default TokenProvider;"]},"metadata":{},"sourceType":"module"}