{"ast":null,"code":"const NumberFormat = inputNumber => {\n  const si = [{\n    value: 1,\n    symbol: \"\"\n  }, {\n    value: 1E3,\n    symbol: \" K\"\n  }, {\n    value: 1E6,\n    symbol: \" M\"\n  }, {\n    value: 1E9,\n    symbol: \" B\"\n  }, {\n    value: 1E12,\n    symbol: \" T\"\n  }, {\n    value: 1E15,\n    symbol: \" P\"\n  }, {\n    value: 1E18,\n    symbol: \" E\"\n  }];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var i;\n\n  for (i = si.length - 1; i > 0; i--) {\n    if (inputNumber >= si[i].value) {\n      break;\n    }\n  }\n\n  return (inputNumber / si[i].value).toFixed(2).replace(rx, \"$1\") + si[i].symbol;\n};\n\n_c = NumberFormat;\nexport default NumberFormat;\n\nvar _c;\n\n$RefreshReg$(_c, \"NumberFormat\");","map":{"version":3,"sources":["/Users/hyunobae/dev/jamaica/src/utiles/numberFormat.tsx"],"names":["NumberFormat","inputNumber","si","value","symbol","rx","i","length","toFixed","replace"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,WAAD,IAAyB;AAC5C,QAAMC,EAAE,GAAG,CACT;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GADS,EAET;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAFS,EAGT;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAHS,EAIT;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAJS,EAKT;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GALS,EAMT;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GANS,EAOT;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAPS,CAAX;AASA,QAAMC,EAAE,GAAG,0BAAX;AACA,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAGJ,EAAE,CAACK,MAAH,GAAY,CAArB,EAAwBD,CAAC,GAAG,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;AAClC,QAAIL,WAAW,IAAIC,EAAE,CAACI,CAAD,CAAF,CAAMH,KAAzB,EAAgC;AAC9B;AACD;AACF;;AACD,SAAO,CAACF,WAAW,GAAGC,EAAE,CAACI,CAAD,CAAF,CAAMH,KAArB,EAA4BK,OAA5B,CAAoC,CAApC,EAAuCC,OAAvC,CAA+CJ,EAA/C,EAAmD,IAAnD,IAA2DH,EAAE,CAACI,CAAD,CAAF,CAAMF,MAAxE;AACD,CAlBD;;KAAMJ,Y;AAoBN,eAAeA,YAAf","sourcesContent":["const NumberFormat = (inputNumber: number) => {\n  const si = [\n    { value: 1, symbol: \"\" },\n    { value: 1E3, symbol: \" K\" },\n    { value: 1E6, symbol: \" M\" },\n    { value: 1E9, symbol: \" B\" },\n    { value: 1E12, symbol: \" T\" },\n    { value: 1E15, symbol: \" P\" },\n    { value: 1E18, symbol: \" E\" }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var i;\n  for (i = si.length - 1; i > 0; i--) {\n    if (inputNumber >= si[i].value) {\n      break;\n    }\n  }\n  return (inputNumber / si[i].value).toFixed(2).replace(rx, \"$1\") + si[i].symbol;\n}\n\nexport default NumberFormat;"]},"metadata":{},"sourceType":"module"}